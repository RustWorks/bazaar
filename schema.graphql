type QueryRoot {
	customers: [Customer!]!
	customerById(id: UUID!): Customer!
	customerByEmail(email: String!): Customer!
	cartById(id: UUID!): ShoppingCart!
}
"""
Graphql Resolver
"""
type Customer {
	id: UUID!
	email: String!
	firstName: String!
	lastName: String!
	createdAt: DateTime!
	lastModified: DateTime!
	cart: ShoppingCart
}
scalar UUID
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
type ShoppingCart {
	id: UUID!
	customerId: UUID
	cartType: CartType!
	discounts: [UUID!]
	priceBeforeDiscounts: Float!
	priceAfterDiscounts: Float!
	currency: Currency!
	createdAt: DateTime!
	lastModified: DateTime!
	items: [CartItem!]!
}
enum CartType {
	ANONYMOUS
	KNOWN
}
enum Currency {
	GBP
	USD
}
type CartItem {
	sku: String!
	quantity: Int!
	pricePerUnit: Float!
	name: String!
	description: String!
	imgSrc: String!
	tags: [String!]!
}
type MutationRoot {
	createCustomer(email: String!, password: String!, firstName: String!, lastName: String!): UUID!
	updateCustomer(id: UUID!, update: CustomerUpdate!): Customer!
	createAnonymousCart(currency: Currency!): ShoppingCart!
	createKnownCart(id: UUID!, currency: Currency!): ShoppingCart!
	addItemsToCart(id: UUID!, newItems: [UpdateCartItem!]!): ShoppingCart!
	removeItemsFromCart(id: UUID!, removedItems: [UpdateCartItem!]!): ShoppingCart!
}
input CustomerUpdate {
email: String!
firstName: String!
lastName: String!
}
input UpdateCartItem {
sku: String!
quantity: Int!
}
schema {
	query: QueryRoot
	mutation: MutationRoot
}
